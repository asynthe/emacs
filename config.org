#+title: Asynthe's Emacs Config
#+author: Benjamin Dunstan
#+startup: overview
#+property: header-args :tangle config.el
#+auto_tangle: t

Welcome to my custom Emacs configuration!

[Cool Emacs logo with cat]

* Table of Contents :toc:
- [[#info][Info]]
  - [[#keybinds][Keybinds]]
- [[#system][System]]
  - [[#native-compilation][Native Compilation]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#runtime-performance][Runtime Performance]]
  - [[#auto-refresh-buffer-if-buffer-changes][Auto-refresh buffer if buffer changes]]
- [[#main][Main]]
  - [[#configuration][Configuration]]
  - [[#ui][UI]]
  - [[#font][Font]]
  - [[#iosevka][Iosevka]]
  - [[#font-ligatures][Font Ligatures]]
  - [[#auctex][AucTeX]]
  - [[#buffer][Buffer]]
  - [[#irc][IRC]]
- [[#keybinds-1][Keybinds]]
  - [[#main--evil][Main / Evil]]
  - [[#wm-keybinds][WM Keybinds]]
  - [[#display--hide][Display / Hide]]
  - [[#workspaces-perspective][Workspaces (Perspective)]]
  - [[#splits-and-windows][Splits and Windows]]
  - [[#buffers--ibuffers][Buffers / Ibuffers]]
  - [[#apps][Apps]]
  - [[#files][Files]]
  - [[#pdf-tools][PDF Tools]]
  - [[#org][Org]]
  - [[#file-shortcuts][File Shortcuts]]
- [[#org-1][Org]]
  - [[#configuration-1][Configuration]]
  - [[#roam][Roam]]
  - [[#roam-graph-org-roam-ui][Roam Graph (org-roam-ui)]]
  - [[#agenda][Agenda]]
  - [[#journal][Journal]]
  - [[#pomodoro][Pomodoro]]
  - [[#auto-tangle][Auto-tangle]]
  - [[#code-blocks][Code Blocks]]
  - [[#export-to-manpage][Export to Manpage]]
  - [[#table-of-contents][Table of Contents]]
  - [[#org-latex-preview][Org Latex Preview]]
  - [[#org-fragtox---automatic-latex-fragment-preview][Org Fragtox - Automatic LaTeX Fragment Preview]]
  - [[#org-superstar][Org Superstar]]
  - [[#org-reveal][Org Reveal]]
- [[#packages][Packages]]
  - [[#package-manager--sources][Package Manager / Sources]]
  - [[#system-1][System]]
  - [[#ui-1][UI]]
  - [[#tools][Tools]]
- [[#extra][Extra]]
  - [[#blog---simple-httpd][Blog - simple-httpd]]
  - [[#ui---render-modeline-just-in-active-window][UI - Render Modeline just in active window]]
  - [[#disable-yesno-when-cancelling-note-on-org-capture][Disable Yes/No when Cancelling Note on Org Capture]]
- [[#delete--add-in-future][Delete / Add in Future]]
  - [[#backups][Backups]]
  - [[#eaf-emacs-application-framework][EAF (Emacs Application Framework)]]
  - [[#org-gtd][ORG GTD]]
  - [[#websocket-exists][websocket [EXISTS?]]]
  - [[#ement][Ement]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#keycast][Keycast]]
  - [[#good-scroll][Good Scroll]]
  - [[#working-but-removed][Working but Removed]]

* Info

My Emacs config.

*EMACS TERMINOLOGY*
|------------+----------------|
| usual term | emacs term     |
|------------+----------------|
| open file  | buffer         |
| window     | window / frame |
|------------+----------------|

** Keybinds

#+CAPTION: My list of keybindings
|----------+---------+--------------|
| Keybinds | Command | What it does |
|----------+---------+--------------|
| SPC w c  |         |              |
| ...      |         |              |
| IN       | PRO     | GRESS        |
| ...      |         |              |
|----------+---------+--------------|

* System
** Native Compilation

#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

** Garbage Collection

#+begin_src emacs-lisp
;; Using garbage magic hack.
(use-package gcmh
  :config
  (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive
;;(setq comp-async-report-warnings-errors nil)
#+end_src

** Runtime Performance

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** Auto-refresh buffer if buffer changes

- [[https://stackoverflow.com/questions/1480572/how-to-have-emacs-auto-refresh-all-buffers-when-files-have-changed-on-disk][How to have Emacs auto-refresh all buffers when files have changed on disk? - StackOverflow]]

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

* Main
** Configuration
*** Daemon

_note_: Doesn't work on Wayland.

#+begin_src emacs-lisp
;;(server-start)
#+end_src

*** General

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t))
#+end_src

*** Evil Mode / Evil Collection

It's vim, on emacs!

- [[https://github.com/noctuid/evil-guide][Evil Guide - github page]]
- [[https://github.com/emacs-evil/evil][Evil Mode - github page]]
- [[https://github.com/emacs-evil/evil-collection][Evil Collection - github page]] (Enables having the evil keybindings everywhere.)

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t) ;; This is optional, set on by default
  (setq evil-want-keybinding nil)
  (setq evil-want-fine-undo t)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)

;; Override pdf-tools mode
;;(evil-make-overriding-map pdf-view-mode-map 'normal)
#+end_src

*** Code - Language Support

#+begin_src emacs-lisp
(use-package haskell-mode)
(use-package lua-mode)
(use-package markdown-mode)
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src

** UI
*** Minimalist Menu

sharpening the knife...

#+begin_src emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)     ; Disable visible scrollbar
(tool-bar-mode -1)       ; Disable the toolbar
(tooltip-mode -1)        ; Disable tooltips
(menu-bar-mode -1)       ; Disable the menu bar

;;(set-fringe-mode 10)   ; Give some breathing room
(set-fringe-mode 0)      ; No fringes, please

;; Set Margins / Padding
(setq-default left-margin-width 5 right-margin-width 5)
(set-window-buffer nil (current-buffer))

;; Set up the visible bell
(setq visible-bell t)
(setq ring-bell-function 'ignore)

;; Copy from X11 apps (something temporary)
(setq x-select-enable-clipboard t)

;; Delete selected text
(delete-selection-mode t)

;; Don't do file backups (file.org~)
(setq make-backup-files nil)
;; (setq backup-directory-alist '((".*" . "~/.config/emacs/backup"))) ; Backups on a specific folder

;; Don't fold code blocks in org-mode
(setq org-hide-block-startup nil)
#+end_src

*** Tabline

#+begin_src emacs-lisp
(global-tab-line-mode -1)
;;(setq tab-line-new-button-show nil) ;; do not show add-new button
;;(setq tab-line-close-button-show nil) ;; do not show close button
;;(setq tab-line-separator "/")
;;(setq tab-line-separator "") ;; set to empty

;; tab color settings

;;(set-face-attribute 'tab-line nil ;; background behind tabs
      ;;:background "gray40"
      ;;:foreground "gray60" :distant-foreground "gray50"
      ;;:height 1.0 :box nil)
;;(set-face-attribute 'tab-line-tab nil ;; active tab in another window
      ;;:inherit 'tab-line
      ;;:foreground "gray70" :background "gray90" :box nil)

;;(set-face-attribute 'tab-line-tab-current nil ;; active tab in current window
      ;;:background "#b34cb3" :foreground "white" :box nil)
;;(set-face-attribute 'tab-line-tab-inactive nil ;; inactive tab
      ;;:background "gray60" :foreground "black" :box nil)
;;(set-face-attribute 'tab-line-highlight nil ;; mouseover
      ;;:background "white" :foreground 'unspecified)
#+end_src

*** Modeline

#+begin_src emacs-lisp
(set-face-attribute 'mode-line-inactive nil
		          :underline t
			  :background (face-background 'default))
#+end_src

*** Line Numbering and Truncated Lines

Disable line numbering in /Org/ or /Markdown/.

#+begin_src emacs-lisp
;; Line numbers and truncated lines

;;(global-display-line-numbers-mode t)
;; (global-display-line-numbers-mode -1)
(global-visual-line-mode t)

;; See column line in little mode
(column-number-mode)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

*** Transparency

- [[https://kristofferbalintona.me/posts/202206071000/][True Emacs Transparency - Kristoffer Balintona]]
_note_: Works on X windows with a compositor like [[id:a2042b5e-f0a2-4213-a8c8-2fd9cd9636d8][picom]], but in Wayland case, you will need pure GTK emacs.

#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 0.40) ; For current frame
(add-to-list 'default-frame-alist '(alpha-background .40)) ; For all new frames henceforth

;;(defun toggle-window-transparency ()
  ;;"Toggle transparency."
  ;;(interactive)
  ;;(let ((alpha-transparency 55))
    ;;(pcase (frame-parameter nil 'alpha-background)
      ;;(alpha-transparency (set-frame-parameter nil 'alpha-background 100))
      ;;(t (set-frame-parameter nil 'alpha-background alpha-transparency)))))
#+end_src

*BACKGROUND*

Is not possible at a glance, but it seems there's a /frame.c/ as mentioned in this stack question, in any case, i don't have enough time to check it. Here is the [[https://stackoverflow.com/questions/2010158/setting-an-emacs-background-image][link]].

*** Scrolling

Some natural scrolling, please.

*PIXEL SCROLLING*
There are two modes, /pixel-scroll-mode/ and /pixel-scroll-precision-mode/.
/pixel-scroll-mode/ is not working well for me so i'll go for the second.

Emacs seems to normally do a half-page scroll whenever you go down the buffer, this can be counter-intuitive.

#+begin_src emacs-lisp
(setq scroll-conservatively 101) ;; Value greater than 100 gets rid of half page jumping
(setq scroll-step 1) ;; Keyboard scroll one line at a time

;; Mouse
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; How many lines at a time
(setq mouse-wheel-progressive-speed t) ;; Accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; Scroll window under mouse

;; Precision pixel scroll
 
(pixel-scroll-precision-mode 1)
(setq pixel-scroll-precision-use-momentum t) ;; Keep the momentum (notice on touchpad)
(setq pixel-scroll-precision-large-scroll-height 40.0) ;; Scroll with mouse as smooth as touchpad
;; If it doesn't work, decrease by 5 until it works.
#+end_src

*** Zoom In/Out

zoom in with ctrl + / zoom out with ctrl -

#+begin_src emacs-lisp
;; zoom in/out like we do everywhere else.
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;;(global-set-key (kbd "C-0") '(lambda () (interactive) (text-scale-adjust 0))) ;; return to default
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

*** Theme - Meltbus / Doom Themes

#+begin_src emacs-lisp
(use-package doom-themes)
(load-theme 'doom-meltbus t)
(setq doom-themes-enable-bold t)        ; if nil, bold is disabled
(setq doom-themes-enable-italic t)      ; if nil, italics is disabled
#+end_src

** Font
** Iosevka

I just love iosevka uppercase, and some good japanese font for me writing.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
	  :font "Iosevka Nerd Font 14"
	  :weight 'regular)
(set-face-attribute 'variable-pitch nil
	  :font "Iosevka Nerd Font 14"
	  :weight 'regular) 
(set-face-attribute 'fixed-pitch nil
	  :font "Iosevka Nerd Font 14"
	  :weight 'regular)

;; Org Faces
(defun my-org-faces ()
  (set-face-attribute 'org-todo nil :height 0.8)
  (set-face-attribute 'org-level-1 nil :height 1.0)
  (set-face-attribute 'org-level-2 nil :height 1.0)
  (set-face-attribute 'org-level-3 nil :height 1.0))

(add-hook 'org-mode-hook #'my-org-faces)

;; Needed if using emacs client. Otherwise, your fonts will be smaller than expected.
(add-to-list 'default-frame-alist '(font . "Iosevka 14"))
#+end_src

** Font Ligatures

+ [ligatures.el github link]

#+begin_src emacs-lisp
(use-package ligature
  :config
  (ligature-set-ligatures 'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                       "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                       "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                       ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))
  (ligature-set-ligatures 'org-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                       "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                       "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                       ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))
  (global-ligature-mode t))
#+end_src

** AucTeX

This previews latex on latex files.

#+begin_src emacs-lisp
(use-package auctex
  :hook
  (LaTeX-mode . turn-on-prettify-symbols-mode)
  (LaTeX-mode . turn-on-flyspell))

(require 'latex)
#+end_src

*** Tectonic backend

#+begin_src emacs-lisp
(setq TeX-engine-alist '((default
                          "Tectonic"
                          "tectonic -X compile -f plain %T"
                          "tectonic -X watch"
                          nil)))
#+end_src

** Buffer
*** Rename file from Inside Buffer

Change the file name from inside the same buffer.

#+begin_src emacs-lisp
;; Changing a file name from the buffer
(defun rename-current-buffer-file ()
  "Renames current buffer and the file it is visiting."
  (interactive)
  (let* ((name (buffer-name))
	    (filename (buffer-file-name))
	    (basename (file-name-nondirectory filename)))
    (if (not (and filename (file-exists-p filename)))
	    (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
	   (if (get-buffer new-name)
	       (error "A buffer name '%s' already exists!" new-name)
	     (rename-file filename new-name 1)
	     (rename-buffer new-name)
	     (set-visited-file-name new-name)
	     (set-buffer-modified-p nil)
	     (message "File '%s' successfully renamed to '%s'"
		      name (file-name-nondirectory new-name)))))))
#+end_src

*** Kill All Other Buffers

Kill all other buffers except the current one.

#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer
	(delq (current-buffer)
	      (remove-if-not 'buffer-file-name (buffer-list)))))
#+end_src
*** Maximize Buffer Window

Maximize buffer to take the entire window.

#+begin_src emacs-lisp
(defun toggle-maximize-buffer ()
  "Toggle maximize buffer"
  (interactive)
  (if (= 1 (length (window-list)))
      (progn
        (set-window-configuration my-saved-window-configuration)
        (goto-char my-saved-point))
    (setq my-saved-window-configuration (current-window-configuration)
          my-saved-point (point))
    (delete-other-windows)))
#+end_src

** IRC

#+begin_src emacs-lisp
(setq erc-prompt (lambda () (concat "[" (buffer-name) "]"))
      erc-server "irc.libera.chat"
      erc-nick "meowtoo"
      erc-user-full-name "Benjamin"
      erc-track-shorten-start 24
      erc-autojoin-channels-alist '(("irc.libera.chat" "#gentoo-chat"))
      erc-kill-buffer-on-part t
      erc-fill-column 100
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 20
      ;; erc-auto-query 'bury
      )
#+end_src

* Keybinds
** Main / Evil

*Table of Keyboard Binds* (SPC)
|---------+-----------------------------+---------------------------------|
| Bind    | Command                     | Use                             |
|---------+-----------------------------+---------------------------------|
| SPC .   | counsel-find-file           | Change into another file.       |
| SPC ,   | perps-counsel-switch-buffer | Switch buffer. (with preview)   |
| SPC /   | persp-switch                | Change workspace. (perspective) |
|         |                             |                                 |
| SPC q q | kill-emacs                  | Exit emacs without saving.      |
| SPC q s | save-buffers-kill-emacs     | Exit emacs saving all buffers.  |
|---------+-----------------------------+---------------------------------|

*Table of Keyboard Binds*
|------+-----------------+----------------------------|
| Bind | Command         | Use                        |
|------+-----------------+----------------------------|
| M-[  | previous-buffer | Change to previous buffer. |
| M-]  | next-buffer     | Change to next buffer.     |
|------+-----------------+----------------------------|

#+begin_src emacs-lisp
(nvmap :states '(normal) :keymaps 'override :prefix "SPC"

       ;; Perspective Binds (Find-file / Switch-buffer)
       "."   '(counsel-find-file :which-key "Find file")
       ","   '(persp-counsel-switch-buffer :which-key "Switch buffer")
       "/"   '(persp-switch :which-key "Change workspace")

       ;; Exit emacs
       "q q" '(kill-emacs :which-key "Exit emacs without saving")
       "q s" '(save-buffers-kill-emacs :which-key "Exit emacs saving all the buffers")
      
       ;; Helpful
       "h v" '(counsel-describe-variable :which-key "Describe variable")
       "d f" '(describe-font :which-key "Describe font"))
#+end_src

Disable Space, Enter and Tab for use in other Keybinds such as the *General* ones.
#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

** WM Keybinds

WM-like buffer management
I use the super key and the vi row to move around windows.

#+begin_src emacs-lisp
;; GLOBAL KEYBINDINGS

;; easy window swap
(global-set-key (kbd "s-n") 'window-swap-states)

;; window switch - vi keys
(global-set-key (kbd "s-h") 'windmove-left)
(global-set-key (kbd "s-j") 'windmove-down)
(global-set-key (kbd "s-k") 'windmove-up)
(global-set-key (kbd "s-l") 'windmove-right)

;; window switch - arrow keys
;; very easy
(windmove-default-keybindings 'super)

;; window resize - vi keys
(global-set-key (kbd "s-C-h") 'shrink-window-horizontally)
(global-set-key (kbd "s-C-j") 'enlarge-window)
(global-set-key (kbd "s-C-k") 'shrink-window)
(global-set-key (kbd "s-C-l") 'enlarge-window-horizontally)

;; window resize - arrow keys
(global-set-key (kbd "s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "s-<down>") 'enlarge-window)
(global-set-key (kbd "s-<up>") 'shrink-window)
(global-set-key (kbd "s-<right>") 'enlarge-window-horizontally)

;; other
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Display / Hide

#+begin_src emacs-lisp
(nvmap :states '(normal) :keymaps 'override :prefix "SPC"

       ;; T - toggle
       "t c" '(centered-cursor-mode :which-key "Toggle centered cursor mode")
       "t x" '(global-centered-cursor-mode :which-key "Toggle centered cursor mode on all buffers")
       ;;"t s" '(scroll-lock-mode :which-key "Scroll lock mode") ;; Disabled for centered-cursor-mode
       ;;"t t" '(toggle-window-transparency :which-key "Toggle transparency")
       "t l" '(org-latex-preview :which-key "Toggle LaTeX fragment preview")
       "t h" '(org-toggle-heading :which-key "Org toggle heading")
       "t m" '(global-org-modern-mode :which-key "Activate org modern"))
#+end_src

** Workspaces (Perspective)

Change Perspective
#+begin_src emacs-lisp
(global-set-key (kbd "s-{") 'persp-prev)
(global-set-key (kbd "s-}") 'persp-next)
#+end_src


#+begin_src emacs-lisp
(nvmap :states '(normal) :keymaps 'override :prefix "SPC"
       "p k" '(persp-kill :which-key "Kill workspace")
       "p r" '(persp-rename :which-key "Rename workspace")
       "p a" '(persp-add-buffer :which-key "Move a buffer to current workspace, no switching")
       "p m" '(persp-set-buffer :which-key "Move buffer to workspace and remove from all others"))
#+end_src

** Splits and Windows

Cool stuff, hacker mode.

#+begin_src emacs-lisp
(winner-mode 1)
(nvmap :prefix "SPC"
       ;; Window splits
       "w c"   '(evil-window-delete :which-key "Close window")
       "w n"   '(evil-window-new :which-key "New window")
       "w s"   '(evil-window-split :which-key "Horizontal split window")
       "w v"   '(evil-window-vsplit :which-key "Vertical split window")
       ;; Window motions
       "w h"   '(evil-window-left :which-key "Window left")
       "w j"   '(evil-window-down :which-key "Window down")
       "w k"   '(evil-window-up :which-key "Window up")
       "w l"   '(evil-window-right :which-key "Window right")
       "w w"   '(evil-window-next :which-key "Goto next window")
       ;; winner mode
       "w <left>"  '(winner-undo :which-key "Winner undo")
       "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

** Buffers / Ibuffers

Moving through buffers and multitasking like a productivity machine.

Change buffers with Alt + [ and ]
#+begin_src emacs-lisp
(global-set-key (kbd "M-[") 'previous-buffer)
(global-set-key (kbd "M-]") 'next-buffer)

(nvmap :prefix "SPC"
      "b b" '(ibuffer :which-key "Ibuffer")
      "b l" '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
      "b n" '(next-buffer :which-key "Next buffer")
      "b p" '(previous-buffer :which-key "Previous buffer")
      "b c" '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
      "b k" '(kill-current-buffer :which-key "Kill current buffer")
      "b K" '(kill-buffer-and-window :which-key "Kill current buffer and window")
      ;;"b K" '(kill-buffer :which-key "Kill buffer")
      "b m" '(toggle-maximize-buffer :which-key "Maximize buffer") ;; From the Extra function

      ;; With n / p
      "b n" '(next-buffer :which-key "Next buffer")
      "b p" '(previous-buffer :which-key "Previous buffer"))
#+end_src

** Apps

#+begin_src emacs-lisp
(nvmap :states '(normal) :keymaps 'override :prefix "SPC"

    ;; Open - Apps
    "o t"   '(term :which-key "Open terminal")
    "e h"   '(counsel-esh-history :which-key "Eshell history")
    "e s"   '(eshell :which-key "Eshell")
  

    ;; Log Buffer
    "l o" '((lambda () (interactive) (clm/toggle-command-log-buffer) (global-command-log-mode)) :which-key "Start command log mode")
    ;; Start log buffer
    "l s" '(global-command-log-mode :which-key "Turn on command log mode")
    "l b" '(clm/toggle-command-log-buffer :which-key "Open the command log buffer")
    
    ;; Modes
    "m w" '(writeroom-mode :which-key "Writeroom mode"))
#+end_src

** Files 

#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "f f"   '(find-file :which-key "Find file")
       "f r"   '(rename-current-buffer-file :which-key "Rename current buffer filename")
       ;;"f r"   '(counsel-recentf :which-key "Recent files")
       ;; put recent files in SPC + /
       "f s"   '(save-buffer :which-key "Save file")
       "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
       "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
       "f C"   '(copy-file :which-key "Copy file")
       "f D"   '(delete-file :which-key "Delete file")
       "f R"   '(rename-file :which-key "Rename file")
       "f S"   '(write-file :which-key "Save file as...")
       "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** PDF Tools

#+begin_src emacs-lisp
(nvmap :states '(normal) :keymaps 'override :prefix "SPC"
       "p i" '(pdf-view-midnight-minor-mode :which-key "Invert PDF colors"))
#+end_src
 
** Org

;;#+begin_src emacs-lisp
"m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
"m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
"m ."   '(counsel-org-goto :which-key "Counsel org goto")
"m e"   '(org-export-dispatch :which-key "Org export dispatch")
"m f"   '(org-footnote-new :which-key "Org footnote new")
"m n"   '(org-store-link :which-key "Org store link")
"m t"   '(org-todo :which-key "Org todo")
"m T"   '(org-todo-list :which-key "Org todo list")
;;"o a"   '(org-agenda :which-key "Org agenda")
;;#+end_src

For the scroll lock (SPC t s), use C-l to put cursor on top, center or bottom.

#+begin_src emacs-lisp
(nvmap :states '(normal) :keymaps 'override :prefix "SPC"
  
       ;; NOT SETUP
       ;;"n r d" dailies file
       ;;"n r z" agenda cal-fw?
       ;;"n r x" tasks file
 
       ;; Org capture
       "n n" '(org-roam-capture :which-key "New note")
       "n f" '(org-roam-node-find :which-key "Find note")
       "n d s" '(org-roam-db-sync :which-key "Database sync")
       "n i" '(org-roam-node-insert :which-key "Insert org-roam node link")
       
       ;; Org agenda
       "o a" '(org-agenda :which-key "Open agenda")
       "o s" '(org-time-stamp :which-key "Insert a time stamp")
       "RET" '(org-toggle-checkbox :which-key "Tick checkbox")
       
       ;; Org dailies
       "n d d" '(org-roam-dailies-goto-date :which-key "Dailies calendar")
       ;;"n d d" '(org-roam-dailies-capture-today :which-key "Capture today") ;; I prefer using the calendar.
       "n d n" '(org-roam-dailies-goto-tomorrow :which-key "Next day")
       "n d p" '(org-roam-dailies-goto-yesterday :which-key "Previous day")

       ;; Org journal
       "n j" '(org-journal-new-entry :which-key "New entry")

       "j n" '(org-journal-next-entry :which-key "Next entry")
       "j p" '(org-journal-previous-entry :which-key "Previous entry")

       ;; S - start
       "s p" '(org-pomodoro :which-key "Start/end pomodoro timer")
       

       ;; A - Add
       "a c" '(org-mouse-insert-checkbox :which-key "Insert checkbox")
       
       ;; I - Insert
       "i l" '(org-insert-link :which-key "Insert link")
       "i s" '(org-schedule :which-key "Insert SCHEDULE:")
       "i p" '(org-set-property :which-key "Insert PROPERTY:")

       ;; R - Roam
       "r a" '(org-roam-alias-add :which-key "Add alias to node")
       "r b" '(org-roam-buffer-toggle :which-key "Open roam buffer")
       "r i" '(org-id-get-create :which-key "Create org id")
       "r t" '(org-roam-tag-add :which-key "Add a tag to node")
 
       "r g" '(org-roam-ui-open :which-key "Open org-roam graph")
       ;;"r g" '(org-roam-graph :which-key "Open org-roam graph") [NOT WORKING]

       ;; D - display
       "d l" '(org-toggle-link-display :which-key "Display links as plain text")
       "d i" '(org-toggle-inline-images :which-key "Org toggle inline imager")
       "d m" '(hide-mode-line-mode :which-key "Display/Hide modeline")
       "d a" '(global-hide-mode-line-mode :which-key "Display/Hide all modelines"))

       ;; NOT SET
       ;;"d i"   '(org-toggle-item :which-key "Org toggle item")
       ;;"d i" '(org-display-inline-images :which-key "Display images") ; How does this work?       
#+end_src

** File Shortcuts

*Example of a shortcut with sudo*
"1" '((lambda () (interactive (find-file "/su::/etc/nixos/configuration.nix"))) :which-key "Nix system configuration")

#+begin_src emacs-lisp
(nvmap :states '(normal) :keymaps 'override :prefix "SPC"

  ;;"c c" '(compile :which-key "Compile")
  ;;"c C" '(recompile :which-key "Recompile")
  ;;"c p" '(check-parens :which-key "Check parenthesis")   
  ;;"c b" '(beacon-blink :which-key "Blink cursor"))
  
  ;; Config files
  "c e" '((lambda () (interactive (find-file "~/.config/emacs/config.org"))) :which-key "Emacs configuration")
  "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Reload emacs config")

  ;; Configuration files 
  "c d" '((lambda () (interactive (find-file "~/sync/system/README.org"))) :which-key "Dots configuration")
  "c f" '((lambda () (interactive (find-file "~/flake/README.org"))) :which-key "Nix flake configuration")
  "c h" '((lambda () (interactive (find-file "~/.config/hypr/README.org"))) :which-key "Hyprland configuration")
  "c t" '((lambda () (interactive (find-file "~/.config/tmux/README.org"))) :which-key "tmux configuration")
  "c l" '((lambda () (interactive (find-file "~/.config/lf/README.org"))) :which-key "lf configuration")
  "c v" '((lambda () (interactive (find-file "~/.config/nvim/README.org"))) :which-key "Neovim configuration")
  "c x" '((lambda () (interactive (find-file "~/.config/xmonad/README.org"))) :which-key "Xmonad configuration")
  "c z" '((lambda () (interactive (find-file "~/.config/zsh/README.org"))) :which-key "Zsh configuration"))
#+end_src

* Org
** Configuration

If you want to mark a work of sentence with bold, you can do it with
C-c C-x C-f * -> Mark as bold
C-c C-x C-f / -> Mark as /italic/
C-c C-x C-f _ -> Mark as _underline_
C-c C-x C-f ~ -> Mark as code
C-c C-x C-f = -> Mark as verbatim

If you have a text which has the * character or /, and it bolds or italicizes where you don't want to.
Use (= / =) -> delete the spaces,

#+begin_src emacs-lisp
;; Directory and others
(setq org-directory "~/sync/notes/org/"
      org-id-track-globally t
      org-log-done 'time
      org-startup-folded t
      ;;org-startup-latex-with-latex-preview t ;; Org-fragtog enables it
      ;; Org styling, hide markup etc.
      org-hide-emphasis-markers t
      org-pretty-entities t
      org-ellipsis " … ")

;; Enable the mouse
(require 'org-mouse)

;; * following links with the left mouse button
;; * subtree expansion/collapse (org-cycle) with the left mouse button
;; * several context menus on the right mouse button:
;;    + general text
;;    + headlines
;;    + timestamps
;;    + priorities
;;    + links
;;    + tags
;; * promoting/demoting/moving subtrees with mouse-3
;;    + if the drag starts and ends in the same line then promote/demote
;;    + otherwise move the subtree

;; To do keywords
(setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "CANCELLED(c)" ))
      org-log-done 'time
      ;;org-log-done 'note
      org-fancy-priorities-list '("[A]" "[B]" "[C]")
      org-priority-faces
      '((?A :foreground "#ff6c6b" :weight bold)
        (?B :foreground "#98be65" :weight bold)
        (?C :foreground "#c678dd" :weight bold)))
      ;; just-saving this stuff
      ;;org-enable-priority-commands t
      ;;org-highest-priority ?A
      ;;org-default-priority ?B
      ;;org-lowest-priority ?D)

;; Start in ...
(add-hook 'org-mode-hook 'org-indent-mode)
;; If using Org-capture, start with Insert mode
(add-hook 'org-capture-mode-hook 'evil-insert-state)

;; from DT
(setq org-src-preserve-indentation nil)
;;    org-src-tab-acts-natively t
;;	  org-edit-src-content-indentation 0)

;; Return follows Org links (Special for Org roam)
(setq org-return-follows-link t)

;; RETURN thing 
;;(setq org-M-RET-may-split-line '((item . nil)))
;; Make M-RET not add blank lines when doing a new org heading
(setq org-blank-before-new-entry (quote ((heading . nil)
					     (plain-list-item . nil))))

;; Start with display images
(setq org-startup-with-inline-images t)
(setq org-image-actual-width nil) ;; Set width as nil, enable attrs to edit width

#+end_src

*FONT SIZE FOR HEADINGS*

#+begin_src emacs-lisp
;; Headings Size
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.0))))
 '(org-level-2 ((t (:inherit outline-2 :height 0.9))))
 '(org-level-3 ((t (:inherit outline-3 :height 0.8))))
 '(org-level-4 ((t (:inherit outline-4 :height 0.7))))
 '(org-level-5 ((t (:inherit outline-5 :height 0.7))))
 '(org-document-title ((t (:inherit outline-3 :height 0.8)))))

;; Font size
(set-face-attribute 'default nil :height 160)

;; Set all to text size
;;(require 'org-faces
;;  (dolist (face '(org-document-title
;;                 org-level-1
;;                 org-level-2
;;                 org-level-3))
;;(set-face-attribute face nil :height 1.0)))
#+end_src

*DON'T FOLLOW/OPEN ORG BUFFERS IN SPLIT WINDOW*

For this we need *org-link-frame-setup* to use _find-file_ instead of _find-file-other-window_

To do this:
- Open customize-variable, *M-x customize variable RET*
- Go into *org-link-frame-setup RET*
- Click Value Menu next to *find-file-other-window* and select *find-file*
- Click *Apply and Save*.

_note_: disable evil mode *(M-x turn-off-evil-mode RET*) if the menu doesn't appear.

** Roam

Remember to check for EmacSQL SQLite binary with *org-roam--sqlite-available-p*

#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :config
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol) ;; If using org-roam-protocol
  :custom
  (org-roam-directory "~/sync/notes")
  ;;(org-roam-dailies-directory  "personal/daily") ;; From org-roam-directory
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   
             '(("a" "app" plain
             (file "~/sync/notes/personal/templates/app.org")
             :if-new
             (file+head "not_ready/app/%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)

	       
            ("e" "blog" plain
             (file "~/sync/notes/personal/templates/blog.org")
             :if-new
             (file+head "not_ready/blog/%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)


            ("g" "guide" plain
             (file "~/sync/notes/personal/templates/guide.org")
             :if-new
             (file+head "not_ready/guide/%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)


            ("s" "study" plain
             (file "~/sync/notes/personal/templates/study.org")
             :if-new
             (file+head "not_ready/study/%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)

	        ;; PERSONAL

            ("b" "book" plain
             (file "~/sync/notes/personal/templates/booknote.org")
             :if-new
             (file+head "personal/book/%<%Y>-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)

	    
            ("n" "note" plain
             (file "~/sync/notes/personal/templates/note.org")
             :if-new
             (file+head "personal/notes/%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)

	    
            ("m" "media" plain
             (file "~/sync/notes/personal/media.org")
            :if-new
            (file+head "personal/media/%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
            :unnarrowed t))))


            ;;("p" "project" plain "* Goals\n\n%?\n\n* ;;Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
             ;;:if-new
             ;;(file+head "irl/project/%<%Y%m%d>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
             ;;:unnarrowed t)

            ;;("w" "work" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
             ;;:if-new
             ;;(file+head "irl/work/%<%Y%m%d>-${slug}.org" "#+title: ;;${title}\n#+filetags: Project")
             ;;:unnarrowed t))))

;; :config
;;(setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
;; If you're using a vertical completion framework, you might want a more informative completion interface 

;; Configuration of the roam buffer as a side-window
(add-to-list 'display-buffer-alist
	           '("\\*org-roam\\*"
		      (display-buffer-in-direction)
		      (direction . right)
		      (window-width . 0.33)
		      (window-height . fit-window-to-buffer)))

;; Navigation in roam buffer
;;(define-key org-roam-mode-map [mouse-1] #'org-roam-visit-thing)
(define-key org-roam-mode-map [mouse-1] #'org-roam-preview-visit)

#+end_src

** Roam Graph (org-roam-ui)

- [[https://github.com/org-roam/org-roam-ui][github page]]

A graphical frontend for exploring your org-roam Zettelkasten.
Requires:
- websocket
- simple-httpd

#+begin_src emacs-lisp
(use-package org-roam-ui
  :config
  (setq org-roam-ui-sync-theme t
	      org-roam-ui-follow t
	      org-roam-ui-update-on-save t
	      org-roam-ui-open-on-start t))

;;(setq org-roam-graph-viewer nil) ;; use view-file by default
;;(setq org-roam-graph-viewer #'eww-open-file) ;; open the graph in eww.
#+end_src

** Agenda

;;#+begin_src emacs-lisp
(setq org-agenda-files '("~/sync/notes/1_personal/daily")
      ;;org-agenda-include-diary t
      org-agenda-block-separator 8411
      org-agenda-start-on-weekday nil
      org-agenda-start-day "-3d"
      org-agenda-span 15
      org-agenda-custom-commands
      '(("v" "A better agenda view"
	 ((tags "PRIORITY=\"A\""
		((org-agenda-skip-function
		  '(org-agenda-skip-entry-if 'todo 'done))
		 (org-agenda-overriding-header "High-priority unfinished tasks:")))
	  (tags "PRIORITY=\"C\""
		((org-agenda-skip-function
		  '(org-agenda-skip-entry-if 'todo 'done))
		 (org-agenda-overriding-header
		  "Medium-priority unfinished tasks:")))
	  (tags "PRIORITY=\"D\""
		((org-agenda-skip-function
		  '(org-agenda-skip-entry-if 'todo 'done))
		 (org-agenda-overriding-header "Low-priority
unfinished tasks:")))
	  (agenda "")
	  (alltodo "")))))

;; ORG-AGENDA from ORG-ROAM NOTES
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
	  (seq-filter
	   (lambda (node)
	     (member tag-name (org-roam-node-tages node)
		     (my/org-roam-filter-by-tag tag-name))))))
;;#+end_src

** Journal

#+begin_src emacs-lisp
(use-package org-journal
         :config
        (setq org-journal-dir "~/sync/notes/personal/journal"
              org-journal-file-format "%Y-%m-%d.org"
              org-journal-date-prefix "#+title: "
              org-journal-date-format "%a, %d-%m-%Y"
              org-journal-time-prefix "* "))
 #+end_src

** Pomodoro

[[https://en.wikipedia.org/wiki/Pomodoro_Technique][Pomodoro Technique - wikipedia page]]

Run a timer with ~M-x org-pomodoro RET~

#+begin_src emacs-lisp
(use-package org-pomodoro)
#+end_src

** Auto-tangle

Enable it by specifying the ~#+auto_tangle: t~ property in org files.

#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Code Blocks

- [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][List of supported languages]]
  
Some of them: *awk, c, c++, emacs-lisp, elisp (preferred emacs-lisp for this config), haskell, java, python, latex, lisp, lua, shell, R, ruby, sass, scheme, sqlite...*

*BACKGROUND COLOR*
#+begin_src emacs-lisp
;; SOURCE BLOCK CODE BACKGROUND

;;(require 'color)
;;(set-face-attribute 'org-block nil :background
;;                    (color-darken-name
;;                     (face-attribute 'default :background) 3))

;; Language specific
(setq org-src-block-faces '(("bash" (:background "#121212" :extend t))
				("config" (:background "#121212" :extend t))
				("emacs-lisp" (:background "#121212" :extend t))
                            ("python" (:background "#121212" :extend t))
                            ("nix" (:background "#121212" :extend t))
                            ("c" (:background "#121212" :extend t))
			        ("cpp" (:background "#121212" :extend t))
			        ("org" (:background "#121212" :extend t))
                            ("lua" (:background "#121212" :extend t))
			        ("haskell" (:background "#121212" :extend t))
				("config" (:background "121212" :extend t))
			        ("shell" (:background "#121212" :extend t))))


             ;;(custom-set-faces
             ;; '(org-block-begin-line
             ;;   ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF" :extend t))))
             ;; '(org-block
             ;;   ((t (:background "EFF0F1" :extend t))))
             ;; '(org-block-end-line
             ;;   ((t (:overline "#A7A6AA" :foreground "#008ED1" :background"EAEAFF" :extend t))))
             ;; )
#+end_src

*Block Tag*
This will allow us to create the code block just by typing ~<s~ then pressing ~TAB~.

 #+begin_src emacs-lisp
 (use-package org-tempo
   :ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.
 #+end_src

*Syntax Highlighting*
 #+begin_src emacs-lisp
 (setq org-src-fontify-natively t
       org-src-tab-acts-natively t
       org-confirm-babel-evaluate nil
       org-edit-src-content-indentation 0)
 #+end_src

** Export to Manpage

#+begin_src emacs-lisp
    (use-package ox-man
  :ensure nil)
#+end_src

** Table of Contents

Generate table of contents by using the ~toc~ package, then just add to the beggining of your file.
~* TABLE OF CONTENTS :toc:~

It will be automatically updated while you save your file, so no worries.

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org Latex Preview

You can use ~C-h v org-format-latex-options RET~ to understand what can be changed in this variable.

#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src

** Org Fragtox - Automatic LaTeX Fragment Preview

- [[https://github.com/io12/org-fragtog][github page]]

#+begin_src emacs-lisp
(use-package org-fragtog)
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

** Org Superstar

#+begin_src emacs-lisp
(use-package org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

** Org Reveal

Org reveal -> reveal.js
The original org-reveal has been abandoned, that why ox-reveal it's used instead.

#+begin_src emacs-lisp
(use-package ox-reveal)
#+end_src

* Packages
** Package Manager / Sources

This is the package manager.

[[https://menno.io/posts/use-package/][Better Emacs Config: use-package - menno i/o]]
[[https://ianyepan.github.io/posts/setting-up-use-package/][A Quick Tutorial on Use-package for Emacs - Ian Y.E. Pan]]

#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** System
*** Perspective (Workspaces)

+ [[https://github.com/nex3/perspective-el][github page]]
+ [[https://youtu.be/uyMdDzjQFMU][Declutter Your Buffer Lists in Emacs with Perspective.el - System Crafters]]

#+begin_src emacs-lisp
(use-package perspective
  :bind
  ("C-x C-b" . persp-list-buffers)
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p"))
  (persp-state-default-file "~/.config/emacs/persp-save")
  :init
  (persp-mode))
#+end_src

Save the session to disk.

You can save it with: *M-x persp-state-save*
You can load with: *M-x persp-state-load*

#+begin_src emacs-lisp
(add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src

:bind (("C-x k" . persp-kill-buffer*))

_Note_: The default prefix for ~prespective.el~ bindings is ~C-x x~.

The "main" perspective

Listing buffers in the perspective
persp-ivy-switch-buffer
persp-counsel-switch-buffer
persp-ibuffer

works by default on vertico

*** Counsel

#+begin_src emacs-lisp
    (use-package counsel
      :bind (( "M-x" . counsel-M-x)
	( "C-x b" . counsel-ibuffer)
	( "C-x C-f" . counsel-find-file)
      :map minibuffer-local-map
	( "C-r" . 'counsel-minibuffer-history)))
  ;;    :config
(setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
#+end_src

*** Ivy

#+begin_src emacs-lisp
(ivy-mode)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
       :map ivy-minibuffer-map
       ("TAB" . ivy-alt-done)	
       ("C-l" . ivy-alt-done)
       ("C-j" . ivy-next-line)
       ("C-k" . ivy-previous-line)
       :map ivy-switch-buffer-map
       ("C-k" . ivy-previous-line)
       ("C-l" . ivy-done)
       ("C-d" . ivy-switch-buffer-kill) 
       :map ivy-reverse-i-search-map
       ("C-k" . ivy-previous-line)
       ("C-d" . ivy-reverse-i-search-kill)))
;;TEST (NOT WORKIGN YET)
;;(global-set-key (kbd "SPC .") 'counsel-find-file)
;;(global-set-key (kbd "SPC ,") 'counsel-switch-buffer)

;; enable this if you want `swiper' to use it
;; (setq search-default-mode #'char-fold-to-regexp)
;;(global-set-key "\C-s" 'swiper)
;;(global-set-key (kbd "C-c C-r") 'ivy-resume)
;;(global-set-key (kbd "<f6>") 'ivy-resume)
;;(global-set-key (kbd "M-x") 'counsel-M-x)
;;(global-set-key (kbd "C-x C-f") 'counsel-find-file)
;;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
;;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;;(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
;;(global-set-key (kbd "<f1> l") 'counsel-find-library)
;;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;;(global-set-key (kbd "C-c g") 'counsel-git)
;;(global-set-key (kbd "C-c j") 'counsel-git-grep)
;;(global-set-key (kbd "C-c k") 'counsel-ag)
;;(global-set-key (kbd "C-x l") 'counsel-locate)
;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;;(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src

*** Ivy-Rich

with *Counsel-m-X*, get descriptions of what commands do.

#+begin_src emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src

*** Smex

#+begin_src
(use-package smex)
(smex-initialize)
#+end_src

*** Dired

This is the file manager.

#+begin_src emacs-lisp
(use-package all-the-icons-dired)
(use-package dired-open)
(use-package peep-dired)

(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
               "d d" '(dired :which-key "Open dired")
               "d j" '(dired-jump :which-key "Dired jump to current")
               "d p" '(peep-dired :which-key "Peep-dired"))

(with-eval-after-load 'dired
  ;;(define-key dired-mde-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; Auto-refresh dired on file change
(add-hook 'dired-mode-hook 'auto-revert-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "nsxiv")
                               ("jpg" . "nsxiv")
                              ("png" . "nsxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

*** Which Key

"/Show me da commands./"

[[https://github.com/justbur/emacs-which-key][github page]]

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1
        which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
#+end_src

*** Valign

Visual alignment for Org Mode, Markdown and table.el tables.

[[https://github.com/casouri/valign][github page]]

#+begin_src emacs-lisp
(use-package valign)
(add-hook 'org-mode-hook #'valign-mode)
#+end_src

*** PROJECTILE (FIX)

[[https://projectile.mx/][main page]]
[[https://github.com/bbatsov/projectile][github page]]

(define-key projectile-mode-map (kbd "C-x p" 'projectile-command-map)
(projectile-mode +1))

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode 1))
#+end_src

*** SUPER-SAVE
[[https://github.com/bbatsov/super-save][github page]]

#+begin_src emacs-lisp
(unless (package-installed-p 'super-save)
  (package-refresh-contents)
  (package-install 'super-save))

(super-save-mode +1)
(setq super-save-auto-save-when-idle t)
(setq auto-save-default nil)
#+end_src

*** HELPFUL

A better help buffer.

[[https://github.com/Wilfred/helpful][github page]]

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** UI
*** COMMAND LOG MODE

#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src

*** ALL-THE-ICONS

 remember to install them with /M-x all-the-icons-install/

 #+begin_src emacs-lisp
 (use-package all-the-icons)
 #+end_src

*** BEACON - CURSOR BLINK

[[https://github.com/Malabarba/beacon][github page]]

#+begin_src emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1))
#+end_src

*** DOOM MODELINE

 [[https://github.com/seagle0128/doom-modeline][github page - doom-modeline]]
 [[https://github.com/hlissner/emacs-hide-mode-line][github page - hide-mode-line]]
 
 the bar where you see on the bottom of the window.

 #+begin_src emacs-lisp
 (use-package doom-modeline)
 (doom-modeline-mode 1)
 ;; + BATTERY
 (display-battery-mode 1)

 ;; hide the modeline with hide-mode-line-mode
 (use-package hide-mode-line)
 ;;(global-hide-mode-line-mode 1)
 ;; some hooks for stuff in which we don't want use modeline in
 ;;(add-hook 'completion-list-mode-hook #'hide-mode-line-mode)
 (add-hook 'neotree-mode-hook #'hide-mode-line-mode)
 #+end_src

*** EMOJIFY (display emojis)

🙊🙈🙉

#+begin_src emacs-lisp
(use-package emojify
:hook (after-init . global-emojify-mode))
#+end_src

*** CENTERED CURSOR MODE

[[https://github.com/andre-r/centered-cursor-mode.el][github page]]

#+begin_src emacs-lisp
(use-package centered-cursor-mode)
(rassq-delete-all 'centered-cursor-mode auto-mode-alist) ;; Disables mode on all buffers unless started manually.

;; Keep the cursor centered to avoid sudden scroll jumps
;;(require 'centered-cursor-mode)
#+end_src

;; disable in terminal modes
;; http://stackoverflow.com/a/6849467/519736
;; also disable in Info mode, because it breaks going back with the backspace key
;;(define-global-minor-mode my-global-centered-cursor-mode centered-cursor-mode
;; (lambda ()
;;    (when (not (memq major-mode
;;                     (list 'Info-mode 'term-mode 'eshell-mode 'shell-mode 'erc-mode)))
;;      (centered-cursor-mode))))
;;(my-global-centered-cursor-mode 1)

*** NEOTREE

[[https://github.com/jaypei/emacs-neotree][github page]]
[[https://www.emacswiki.org/emacs/NeoTree][emacswiki]]

#+begin_src emacs-lisp
(use-package neotree)
(global-set-key [f8] 'neotree-toggle)

(setq neo-theme (if (display-graphic-p) 'icons 'arrow)) ;; Display all-the-icons icons and fonts
(setq neo-smart-open t) ;; Find current file and jump to node
;; TEST
;; (setq projectile-switch-project-action 'neotree-projectile-action)
#+end_src

** Tools
*** CALFW

#+begin_src emacs-lisp
;;(use-package calfw-cal)
;;(use-package calfw-org)

;;(defun my-open-calendar ()
  ;;(interactive)
  ;;(cfw:open-calendar-buffer
   ;;:contents-sources
   ;;(list
    ;;(cfw:org-create-file-source "Org" "~/sync/notes/org/irl/events.org" "Orange") ; org mode
    ;;(cfw:org-create-file-source "Agenda" "~/sync/notes/org"
    ;;(cfw:org-create-file-source "Events" "~/sync/notes/org"
    ;;)))
#+end_src

*** PDF-TOOLS

[[https://github.com/vedang/pdf-tools][github page]]
[[https://pdftools.wiki][pdftools wiki]]
[[https://github.com/noctuid/evil-guide#example-integration-with-pdf-tools][Evil guide, Example: Integration with Pdf Tools - github page]]

Emacs support library for PDF files.
After the install, run ~M-x pdf-tools-install RET~

*KEYBINDS*

#+begin_src emacs-lisp
(use-package pdf-tools
  ;;:pin manual
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width))
  ;;(define-key pdf-view-mode-map (kbd "C-s") ;;'isearch-forward)
  ;;:custom
  ;;(pdf-annot-activate-created-annotations t ;;"automatically annotate highlights"))

;; Start in midnight-mode, inverted colors
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)

;; Hide cursor, so file doesn't blink
(add-hook 'pdf-view-mode-hook
          (lambda ()
        (set (make-local-variable 'evil-normal-state-cursor) (list nil))
        (internal-show-cursor nil nil)))
#+end_src

*** WRITEROOM MODE
Minor mode for emacs that implements distraction-free writing.

#+begin_src emacs-lisp
(use-package writeroom-mode)
#+end_src

*** PASS

[[https://github.com/NicolasPetton/pass][github page]]
_note_: Emacs implementation of [[id:4f81a52e-4000-4b93-9abc-e30d7920759c][pass]].

#+begin_src emacs-lisp
(use-package pass)
#+end_src

*** LEDGER

#+begin_src emacs-lisp
#+end_src

* Extra
** Blog - simple-httpd

This will enable us to create a local web server, accesible with *http://localhost:8080*, we can also access the other files on the *content/* folder like this: *http://localhost:8080/<filename>.html*

#+begin_src emacs-lisp
(use-package simple-httpd)
#+end_src

** UI - Render Modeline just in active window

This is more of a workaround, as we are just setting up the _inactive_ buffers modeline to black.

#+begin_src emacs-lisp
(set-face-attribute 'mode-line-inactive nil
		        ;;:underline t
			;;:background (face-background 'default)
		        :background "black"
			:foreground "black")

;;hide-mode-line-mode -1
#+end_src

** Disable Yes/No when Cancelling Note on Org Capture

#+begin_src emacs-lisp
;; Function to disable "yes or no" confirmation when cancelling an org-capture note.
  (defun my/return-t (orig-fun &rest args)
    t)
  (defun my/disable-yornp (orig-fun &rest args)
    (advice-add 'yes-or-no-p :around #'my/return-t)
    (advice-add 'y-or-n-p :around #'my/return-t)
    (let ((res (apply orig-fun args)))
      (advice-remove 'yes-or-no-p #'my/return-t)
      (advice-remove 'y-or-n-p #'my/return-t)
      res))
  (advice-add 'org-roam-capture--finalize :around #'my/disable-yornp)
#+end_src

* Delete / Add in Future
** Backups

#+begin_src emacs-lisp
;; Make all backups be in the same directory.
;;(setq backup-directory-alist '(("." . "~/.saves")))

;; Specify a backup by copying (safest but slowest.)
;;(setq backup-by-copying t)
;;(setq backup-by-copying-when-linked t)

;; More backups of versions
;;(setq delete-old-versions t
      ;;kept-new-versions 6
      ;;kept-old-versions 2
      ;;version-control t)

;; Enable this if you don't want backup files
;;(setq make-backup-files nil)
#+end_src

** EAF (Emacs Application Framework)

#+begin_src emacs-lisp
;;(use-package eaf
  ;;:load-path ;;"~/.emacs.d/site-lisp/emacs-application-framework"
  ;;:custom
  ;; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  ;;(eaf-browser-continue-where-left-off t)
  ;;(eaf-browser-enable-adblocker t)
  ;;(browse-url-browser-function 'eaf-open-browser)
  ;;:config
  ;;(defalias 'browse-web #'eaf-open-browser))
  ;;(eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  ;;(eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  ;;(eaf-bind-key take_photo "p" eaf-camera-keybinding)
;;(eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki

;;(require 'eaf-browser)
;;(require 'eaf-pdf-viewer)
#+end_src

** ORG GTD

[[https://www.youtube.com/watch?v=YNqFZ4VBppA][Introducing Org GTD v3 - Loki Consulting (youtube video)]]
[[https://github.com/Trevoke/org-gtd.el][github page]]

#+begin_src emacs-lisp
        (use-package org-gtd
          :after org
          :init
          (setq org-gtd-update-ack "3.0.0"))

        (setq org-edna-use-inheritance t)
        (org-edna-mode t)

        (setq org-gtd-organize-hooks nil) ;; Decorate each item, i put it to skip adding tags to tasks.

        (setq org-agenda-files '("~/sync/notes/1_personal/gtd/next.org"
                                     "~/sync/notes/1_personal/gtd/projects.org"))
#+end_src

** websocket [EXISTS?]

#+begin_src emacs-lisp
(use-package websocket)
#+end_src

** Ement

- [[https://github.com/alphapapa/ement.el][github page]]
- [[https://github.com/matrix-org/pantalaimon/][pantalaimon github page]]
** Vertico
** Marginalia
** Keycast
** Good Scroll

NOT SET UP FOR NOW

[[https://github.com/emacsmirror/good-scroll][github page]]

#+begin_src emacs-lisp
;;(good-scroll-mode 1)
;;(global-set-key [next] #'good-scroll-up)
;;(global-set-key [prior] #'good-scroll-down)
#+end_src

** Working but Removed
*** Aggresive Indent Mode

Keep your code *always* indented.

;;#+begin_src emacs-lisp
  (use-package aggressive-indent)

  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
;;#+end_src

