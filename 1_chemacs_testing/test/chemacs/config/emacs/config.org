#+author: Benjamin Dunstan
#+title: asynthe's Emacs Config

_note_: do not add code blocks to show examples, as this will be taken by the emacs-lisp code block and mess with your config.
_note_: remember to run "all-the-icons-install-fonts" if doing a new install.

- *TODO HARFBUZZ*
- take stuff from DT and your DOOM config
- TEST STRAIGHT.el
[[https://github.com/radian-software/straight.el][github page]]

* PACKAGE MANAGER / SYSTEM
** Ignore Beep

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Setup package.el to work with MELPA.

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
'("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents)
(package-initialize)
#+end_src

** Installling use-package

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+end_src

** DELETE SELECTED TEXT

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

* PACKAGES
** ALL-THE-ICONS
 all the icons for all your packages and apps.
 remember to install them with all-the-icons-install

 #+begin_src emacs-lisp
 (use-package all-the-icons)
 #+end_src

** DASHBOARD 
 the main page of your emacs!
 
 #+begin_src emacs-lisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.emacs.d/blackhole.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
 #+end_src

for *Emacsclient* too
#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** DIRED
this package is used for this 

#+begin_src emacs-lisp
(use-package all-the-icons-dired)
(use-package dired-open)
(use-package peep-dired)

(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
               "d d" '(dired :which-key "Open dired")
               "d j" '(dired-jump :which-key "Dired jump to current")
               "d p" '(peep-dired :which-key "Peep-dired"))

(with-eval-after-load 'dired
  ;;(define-key dired-mde-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; Auto-refresh dired on file change
(add-hook 'dired-mode-hook 'auto-revert-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "nsxiv")
                               ("jpg" . "nsxiv")
                              ("png" . "nsxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** DOOM MODELINE
 [[https://github.com/seagle0128/doom-modeline][github page - doom-modeline]]
 [[https://github.com/hlissner/emacs-hide-mode-line][github page - hide-mode-line]]
 
 the bar where you see on the bottom of the window.

 #+begin_src emacs-lisp
 (use-package doom-modeline)
 (doom-modeline-mode 1)
 ;; + BATTERY
 (display-battery-mode 1)

 ;; hide the modeline with hide-mode-line-mode
 ;;(use-package hide-mode-line)
 ;;(require 'hide-mode-line)
 ;; some hooks for stuff in which we don't want use modeline in
 ;;(add-hook 'completion-list-mode-hook #'hide-mode-line-mode)
 ;;(add-hook 'neotree-mode-hook #'hide-mode-line-mode)
 #+end_src

** EMOJIFY (display emojis)

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

** EVIL MODE
 it's VIM, on EMACS!

 #+begin_src emacs-lisp
(setq evil-want-keybinding nil) ;; specified by the evil-colletion log
(use-package evil
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  ;;(setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
;;(use-package evil-tutor)
 #+end_src

** ESHELL

#+begin_src emacs-lisp
(nvmap :prefix "SPC"
     "e h"   '(counsel-esh-history :which-key "Eshell history")
     "e s"   '(eshell :which-key "Eshell"))
#+end_src

** GENERAL (to set up keybindings)
 this allow us to set keybindings w "General.el"
 #+begin_src emacs-lisp
 (use-package general
 :config
 (general-evil-setup t))
 #+end_src

** PROJECTILE

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode 1))
#+end_src

** SUPER-SAVE
[[https://github.com/bbatsov/super-save][github page]]

#+begin_src emacs-lisp
(unless (package-installed-p 'super-save)
  (package-refresh-contents)
  (package-install 'super-save))

(super-save-mode +1)
(setq super-save-auto-save-when-idle t)
(setq auto-save-default nil)
#+end_src

** LANGUAGE SUPPORT 

#+begin_src emacs-lisp
(use-package haskell-mode)
(use-package lua-mode)
(use-package markdown-mode)
#+end_src

** IVY

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))
(use-package ivy
  :defer 0.1
  :diminish
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))
(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer)
  (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+end_src

#+begin_src emacs-lisp
(setq ivy-initial-inputs-alist nil)
#+end_src

*** Smex

#+begin_src emacs-lisp
(use-package smex)
(smex-initialize)
#+end_src

** PROJECTILE

#+begin_src emacs-lisp
      (use-package projectile
    :config
  (projectile-global-mode 1))
#+end_src

** ESHELL

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** TOC (Table of Contents)
have an up-to-date table of contents in org files without exporting 
(useful useful for README files on GitHub).
Use :TOC: to create the table.

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** VERTICO

#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** WHICH KEY
 that buffer menu you see when you press a combination of keys and wait for some seconds.

 #+begin_src emacs-lisp
 (use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
 #+end_src

** WRITEROOM MODE

#+begin_src emacs-lisp
(use-package writeroom-mode)
#+end_src

** POMODORO

#+begin_src emacs-lisp
(use-package org-pomodoro)
#+end_src

** NOT YET SET PACKAGES 
*** UNICODE (?)
* KEYBINDINGS
** MAIN KEYBINDINGS

 #+begin_src emacs-lisp
 (nvmap :keymaps 'override :prefix "SPC"
	"SPC"   '(counsel-M-x :which-key "M-x")
	"c c"   '(compile :which-key "Compile")
	"c C"   '(recompile :which-key "Recompile")
	"h r r" '((lambda () (interactive) (load-file "~/.emacs.default/init.el")) :which-key "Reload emacs config")
	"t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
	"m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
	"m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
	"m ."   '(counsel-org-goto :which-key "Counsel org goto")
	"m e"   '(org-export-dispatch :which-key "Org export dispatch")
	"m f"   '(org-footnote-new :which-key "Org footnote new")
	"m h"   '(org-toggle-heading :which-key "Org toggle heading")
	"m i"   '(org-toggle-item :which-key "Org toggle item")
	"m n"   '(org-store-link :which-key "Org store link")
	"m o"   '(org-set-property :which-key "Org set property")
	"m t"   '(org-todo :which-key "Org todo")
	"m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
	"m B"   '(org-babel-tangle :which-key "Org babel tangle")
	"m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager"))
	"m T"   '(org-todo-list :which-key "Org todo list")
	;;"o a"   '(org-agenda :which-key "Org agenda")
 #+end_src
 
** FILE COMMANDS

#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "."     '(find-file :which-key "Find file")
       "b l"     '(+vertico/switch-workspace-buffer :which-key "Switch workspace")
       "m"     '(org-switchb :which-key "Switch workspace")
       "f f"   '(fnd-file :which-key "Find file")
       "f r"   '(counsel-recentf :which-key "Recent files")
       "f s"   '(save-buffer :which-key "Save file")
       "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
       "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
       "f C"   '(copy-file :which-key "Copy file")
       "f D"   '(delete-file :which-key "Delete file")
       "f R"   '(rename-file :which-key "Rename file")
       "f S"   '(write-file :which-key "Save file as...")
       "f U"   '(sudo-edit :which-key "Sudo edit file")
#+end_src

#+begin_src emacs-lisp
       (nvmap :prefix "SPC"
       "n r m" #'(lambda () (interactive) (find-file "~/sync/notes/org/main.org")))
#+end_src
       ;;:desc "Completion at point"
       ;;"n r c" #'completion-at-point
       ;;:desc "Dailies today"
       ;;"n r ." #'org-roam-dailies-goto-today
       ;;:desc "Dailies find date"
       ;;"n r ," #'org-roam-dailies-goto-date
       ;;:desc "Journal new entry"
       ;;"n r j" #'org-journal-new-entry
       ;;:desc "Agenda"
       ;;"n r z" #'org-agenda
       ;;:desc "Tasks file"
       ;;"n r c" #'(lambda () (interactive) (find-file "~/sync/notes/org/irl/daily/tasks.org"))
       ;;:desc "Events file"
       ;;"n r x" #'(lambda () (interactive) (find-file "~/sync/notes/org/irl/daily/events.org")))

** ORG

;;#+begin_src emacs-lisp
;;(nvmap 
;;  :bind (("C-c n l" . org-roam-buffer-toggle)
;;         ("C-c n f" . org-roam-node-find)
;;         ("C-c n g" . org-roam-graph)
;;         ("C-c n i" . org-roam-node-insert)
;;         ("C-c n c" . org-roam-capture)
;;         ;; Dailies
;;         ("C-c n j" . org-roam-dailies-capture-today)))
;;#+end_src

** BUFFER MOVEMENT (Ibuffer)
moving through buffers and multitasking like a productivity machine.

#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "b i"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src

** ZOOM IN/OUT
 zoom in with ctrl + / zoom out with ctrl -

 #+begin_src emacs-lisp
 ;; zoom in/out like we do everywhere else.
 (global-set-key (kbd "C-=") 'text-scale-increase)
 (global-set-key (kbd "C--") 'text-scale-decrease)
 ;;(global-set-key (kbd "C-0") '(lambda () (interactive) (text-scale-adjust 0))) ;; return to default
 (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
 (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
 #+end_src

* GRAPHICAL USER INTERFACE SETTINGS
** FONTS
 I just love iosevka uppercase, and some good japanese font for me writing.

 #+begin_src emacs-lisp
  (set-face-attribute 'default nil
	    :font "Iosevka 16"
            :height 110
	    :weight 'regular)
  (set-face-attribute 'variable-pitch nil
	    :font "Iosevka 16"
	    :height 120
	    :weight 'regular)
  (set-face-attribute 'fixed-pitch nil
	    :font "Iosevka 16"
	    :height 110
	    :weight 'regular)
 ;; Makes commented text and keywords italics.
 ;; This is working in emacsclient but not emacs.
 ;; Your font must have an italic face available.
 (set-face-attribute 'font-lock-comment-face nil
   :slant 'italic)
 (set-face-attribute 'font-lock-keyword-face nil
   :slant 'italic)

  ;; Uncomment the following line if line spacing needs adjusting.
  ;;(setq-default line-spacing 0.10)

  ;; Needed if using emacs client. Otherwise, your fonts will be smaller than expected.
  (add-to-list 'default-frame-alist '(font . "Iosevka 16"))
 #+end_src

** SYSTEM INTERFACE 
*** menu, toolbar and scroll bar

 #+begin_src emacs-lisp
 (menu-bar-mode -1)
 (tool-bar-mode -1)
 (scroll-bar-mode -1)
 #+end_src

 - enable disable mode-line w a keybinding!
 - disable global-hl-line mode
 - numbering line
 - mode-line

 - left space
 and buffer w normal space

*** line numbers and truncated lines

 #+begin_src emacs-lisp
 ;; LINE STYLE AND NUMBERING
 (setq display-line-numbers-type nil)
 ;;(global-display-line-numbers-mode nil)

 ;; LINE VISUAL STYLE
 (setq global-hl-line-mode nil)
 (setq hl-line-mode nil)
 ;;(setq global-visual-line-mode nil) 

 ;; FRINGE
 ;; color line on the left or right border
 (setq fringe-mode nil)
 #+end_src
 
** SPLITS AND WINDOWS
cool stuff, hacker mode

#+begin_src emacs-lisp
(winner-mode 1)
(nvmap :prefix "SPC"
       ;; Window splits
       "w c"   '(evil-window-delete :which-key "Close window")
       "w n"   '(evil-window-new :which-key "New window")
       "w s"   '(evil-window-split :which-key "Horizontal split window")
       "w v"   '(evil-window-vsplit :which-key "Vertical split window")
       ;; Window motions
       "w h"   '(evil-window-left :which-key "Window left")
       "w j"   '(evil-window-down :which-key "Window down")
       "w k"   '(evil-window-up :which-key "Window up")
       "w l"   '(evil-window-right :which-key "Window right")
       "w w"   '(evil-window-next :which-key "Goto next window")
       ;; winner mode
       "w <left>"  '(winner-undo :which-key "Winner undo")
       "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

** THEME
 your main theme, show them colors.
 #+begin_src emacs-lisp
 (use-package doom-themes)
 (setq doom-themes-enable-bold t)     ; if nil, bold is disabled
 (setq doom-themes-enable-italic t)   ; if nil, italics is disabled
 (load-theme 'doom-one t)
 #+end_src

** SCROLLING

#+begin_src emacs-lisp
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src

* ORG
** ORG CONFIGURATION
*** MAIN CONFIG

    #+begin_src emacs-lisp
    (add-hook 'org-mode-hook 'org-indent-mode)
    (setq org-directory "~/sync/notes/org/"
	  org-log-done 'time
;; Org styling, hide markup etc.
org-hide-emphasis-markers t
org-pretty-entities t
org-ellipsis " … ")
;; from DT
;;(setq org-src-preserve-indentation nil
;;		org-src-tab-acts-natively t
;;		org-edit-src-content-indentation 0)
    #+end_src

*** ORG AGENDA

    #+begin_src emacs-lisp
    (setq org-agenda-files '("~/sync/notes/org/irl/daily")
	  ;;org-agenda-include-diary t
	  org-agenda-block-separator 8411
	  org-agenda-start-on-weekday nil
	  org-agenda-start-day "-3d"
	  org-agenda-span 15)
    #+end_src

*** ORG JOURNAL

 #+begin_src emacs-lisp
 (setq org-journal-dir "~/sync/notes/org/other/me/journal"
       org-journal-date-prefix "#+TITLE: "
       org-journal-time-prefix "* "
       org-journal-date-format "%a, %d-%m-%Y"
       org-journal-file-format "%Y-%m-%d.org")
 #+end_src

*** ORG-CYCLE (TAB FOR CLOSING AND OPENING)

#+begin_src emacs-lisp
(setq org-cycle-emulate-tab t)
#+end_src

*** ORG TODO KEYWORDS

#+begin_src emacs-lisp
(setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
       '((sequence
          "TODO(t)"           ; A task that is ready to be tackled
          "BLOG(b)"           ; Blog writing assignments
          "PROJ(p)"           ; A project that contains other tasks
          "WAIT(w)"           ; Something is holding up this task
          "|"                 ; The pipe necessary to separate "active" states and "inactive" states
          "DONE(d)"           ; Task has been completed
          "CANCELLED(c)" )))  ; Task has been cancelled 
#+end_src

*** SOURCE CODE BLOCK
**** BLOCK TAG

 #+begin_src emacs-lisp
 (use-package org-tempo
   :ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.
 #+end_src

**** SYNTAX HIGHLIGHTING

 #+begin_src emacs-lisp
 (setq org-src-fontify-natively t
     org-src-tab-acts-natively t
     org-confirm-babel-evaluate nil
     org-edit-src-content-indentation 0)
 #+end_src
** ORG ROAM

#+begin_src emacs-lisp
(use-package org-roam)
(setq org-roam-directory "~/sync/notes/org")
  ;;:config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  ;;(setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  ;; If using org-roam-protocol
  ;;  (require 'org-roam-protocol)
#+end_src

** ORG EXPORT TO MANPAGE

#+begin_src emacs-lisp
    (use-package ox-man
  :ensure nil)
#+end_src

** ORG MODERN
[[https://github.com/minad/org-modern][github page]]

#+begin_src emacs-lisp
(use-package org-modern)
(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

(global-org-modern-mode)
#+end_src

** NOT SET UP YET
*** ORG LINK ABBREVIATIONS

;;#+begin_src emacs-lisp
;; An example of how this works.
;; [[arch-wiki:Name_of_Page][Description]]
;;(setq org-link-abbrev-alist    ; This overwrites the default Doom ;;org-link-abbrev-list
;;        '(("google" . "http://www.google.com/search?q=")
;;          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
;;          ("ddg" . "https://duckduckgo.com/?q=")
;;          ("wiki" . "https://en.wikipedia.org/wiki/")))
;;#+end_src

* PERFORMANCE
** GARBAGE COLLECTION

#+begin_src emacs-lisp
;; Using garbage magic hack.
 (use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive
(setq comp-async-report-warnings-errors nil)
#+end_src

** NATIVE COMPILATION

#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

* JAPANESE

* NOT WORKING

** VTERM
;;#+begin_src emacs-lisp
;;(use-package vterm)
;;#+end_src

** ORG BULLETS -> ORG MODERN
attractive bullets rather than asterisks.

;;#+begin_src emacs-lisp
;;(require 'org-bullets)
;;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
;;#+end_src
** ORG APPEAR
 [[https://github.com/awth13/org-appear][github page]]

 #+begin_src emacs-lisp
(use-package org-appear)
(add-hook org-mode :append #'org-appear-mode)
 #+end_src
